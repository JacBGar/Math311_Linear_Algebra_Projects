{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM1qGTBgW0YwHHsaYDT2jb8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JacBGar/Math311_Linear_Algebra_Projects/blob/main/GramSchmidtOrthonormalizationProcess\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pkm93_zLyrE4"
      },
      "outputs": [],
      "source": [
        "# finding orthonormal vectors using the Gram Schmidt Orthonormalization Process"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Starting with the vectors:\n",
        "\n",
        "$$ r_1 = \\left( \\begin{array}{c} 3 \\\\ 0 \\\\ 3 \\\\ 0\\\\ \\end{array} \\right)\n",
        "r_2 = \\left( \\begin{array}{c} 3 \\\\ 2 \\\\ 3 \\\\ 2\\\\ \\end{array} \\right)\n",
        "r_3 = \\left( \\begin{array}{c} -7 \\\\ -4 \\\\ -5 \\\\ -6\\\\ \\end{array} \\right)\n",
        "r_4 = \\left( \\begin{array}{c} -7 \\\\ -3 \\\\ -11 \\\\ 2\\\\ \\end{array} \\right) $$\n",
        "\n"
      ],
      "metadata": {
        "id": "aRYcfAVPzDBZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "XAz79DjZzFdT"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# creation of vectors\n",
        "#v = np.array([1, 2, 3, 4])\n",
        "#v2 = np.array([0, 0, 1,0])\n",
        "#v"
      ],
      "metadata": {
        "id": "hBC-Bjfe0UKy"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# dot product calculated\n",
        "#v.dot(v)\n",
        "#v.dot(v2)"
      ],
      "metadata": {
        "id": "Xv6CHQtf07ly"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#find the size or magnitude of a vector\n",
        "#np.sqrt(v.dot(v))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u8Po-ixl266e",
        "outputId": "6438d341-032f-40c9-90eb-0d1ce447943c"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.477225575051661"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#linear combinations\n",
        "# (2 * v) + (3 * v2) = c"
      ],
      "metadata": {
        "id": "PSjxBNiy2-j6"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# also can be used to find the size or magnitude of a vector\n",
        "\n",
        "#np.linalg.norm(v)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "phSvkGhI37nc",
        "outputId": "184a8847-d125-45fb-a512-fb28649f3cbb"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.477225575051661"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r1 = np.array([3, 0, 3, 0])\n",
        "r2 = np.array([3, 2, 3, 3])\n",
        "r3 = np.array([-7,-4, -5, -6])\n",
        "r4 = np.array([-7, -3, -11, 2])\n",
        "print(\"r1 is: \", r1)\n",
        "print(\"r2 is: \", r2)\n",
        "print(\"r3 is: \", r3)\n",
        "print(\"r4 is: \", r4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q7WYom344Xod",
        "outputId": "a68e7aad-1eed-4eb7-cc60-59c16b93e2f1"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r1 is:  [3 0 3 0]\n",
            "r2 is:  [3 2 3 3]\n",
            "r3 is:  [-7 -4 -5 -6]\n",
            "r4 is:  [ -7  -3 -11   2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t1 = r1\n",
        "\n",
        "t1\n",
        "\n",
        "n1 = np.sqrt(t1.dot(t1))"
      ],
      "metadata": {
        "id": "J25NaeVr42lH"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "Qy3iPmBF5NFu",
        "outputId": "5b7cfd97-d0f8-41e3-a0c9-758372b9f355"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-59-55f7c4ed196a>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mn1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'dot'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TTCGeKUY5Yna",
        "outputId": "21b0ae92-7cfd-43c5-a8f5-6a24dc40f180"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the magnitude of t1 is: 4.242640687119285\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "u1 = (1/n1) * t1\n",
        "u1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qEqFV9fb5fvy",
        "outputId": "14dd5e2d-f1f2-4287-90d2-5fb6309b49a6"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.70710678, 0.        , 0.70710678, 0.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "size = u1.dot(u1)"
      ],
      "metadata": {
        "id": "rPA6vr7G5rB3"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "size"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PHt-sZH56rD2",
        "outputId": "5d5f2bbe-0ef6-4c70-913e-28be5ccc9a89"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0000000000000002"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t2 = r2 - (r2.dot(u1)) * u1"
      ],
      "metadata": {
        "id": "S1XOIDAV6sAq"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "t2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tfnOckX76z0f",
        "outputId": "26264922-8d6d-4525-d313-e028791c1480"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-4.4408921e-16,  2.0000000e+00, -4.4408921e-16,  3.0000000e+00])"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n2 = np.linalg.norm(t2)"
      ],
      "metadata": {
        "id": "PoziHeXl62k2"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u2 = 1/n2 * t2"
      ],
      "metadata": {
        "id": "mGw-PgHM670U"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8HwpT6Ep7DuW",
        "outputId": "89a32b97-7823-40b7-a62c-bbc84708d4a1"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-1.23168186e-16,  5.54700196e-01, -1.23168186e-16,  8.32050294e-01])"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t3 = r3 - (r3.dot(u1)) * u1 - (r3.dot(u2)) * u2"
      ],
      "metadata": {
        "id": "Fk8fNHb27G2B"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n3 = np.linalg.norm(t3)"
      ],
      "metadata": {
        "id": "ux_muTfT7mcZ"
      },
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u3 = (1/n3) * t3"
      ],
      "metadata": {
        "id": "y-E4iCfk7q_F"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f9MTbhce7uz7",
        "outputId": "a7c423ff-b0ab-445d-cff6-32347fe3c4fe"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-7.07106781e-01, -3.14018492e-16,  7.07106781e-01, -6.28036983e-16])"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t4 = r4 - (r4.dot(u1)) * u1 - (r4.dot(u2)) * u2 - (r4.dot(u3)) * u3"
      ],
      "metadata": {
        "id": "L0rc-zWW7vo7"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n4 = np.linalg.norm(t4)"
      ],
      "metadata": {
        "id": "cCL8ciVB8GRS"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u4 = (1/n4) * t4"
      ],
      "metadata": {
        "id": "x0jk8BwE8K0V"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sfXEN9us8OSz",
        "outputId": "4bd3acd5-8ca7-44d6-f3c8-d9732234a568"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.        , -0.83205029,  0.        ,  0.5547002 ])"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cUjFLoCl8OuJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}